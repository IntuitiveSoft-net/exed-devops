# Configure aws provider
provider "aws" {
  region = var.region
  access_key = var.access_key
  secret_key = var.secret_key
}

# Retrieve ami.id for UBUNTU 20.04
data "aws_ami" "this" {
  owners = ["REDACTED"]

  filter {
    name   = "architecture"
    values = ["x86_64"]
  }

  filter {
    name   = "name"
    values = ["ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-20211129"]
  }

}

data "aws_subnet" "this" {

  filter {
    name = "tag:Name"
    values = [var.public_subnet_name]
  }

}

data "aws_key_pair" "this" {

  key_name = "${var.ec2_name}-key"

}

data "aws_security_group" "this" {

  name = var.security_group_name

}

resource "local_file" "ssh_config" {
  content = <<-DOC
    # Ansible ssh_config file containing variable values from Terraform.
    # Generated by Terraform mgmt configuration.

    Host ${var.ec2_name}
    User ubuntu
    HostName ${aws_instance.this.public_ip}
    IdentityFile ${var.ssh_config_file_path}/${var.ec2_name}-private-key.pem
    DOC
  filename = "${var.ssh_config_file_path}/${var.ec2_name}-config"
}

#Create the EC2 instance
resource "aws_instance" "this" {
  ami   = data.aws_ami.this.id
  subnet_id = data.aws_subnet.this.id
  instance_type = var.instance_type
  associate_public_ip_address = true
  source_dest_check = false
  key_name      = data.aws_key_pair.this.key_name
  tags = {
    Name = "${var.ec2_name}"
  }
  vpc_security_group_ids = [data.aws_security_group.this.id]
}

output "ec2_public_ip" {
  value = aws_instance.this.public_ip
}